
import javax.swing.JOptionPane;

/*
    programmer: Mathew Borg
    Date: 2021-06-10
    Program Name: U4A1P2_Borg_BlackJack
    Program Discription: This program lets you play black jack against the dealer 
 */
public class Main extends javax.swing.JFrame {
    public static String fileName = "players.xml"; //creats public static string
    private static String inputPlayerName, playerName; //creats private static Strings
    private static int playerBalance, playerBet; //creats private static ints
    
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        setOutput(); //sets GUI outPuts
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        title = new javax.swing.JLabel();
        author = new javax.swing.JLabel();
        btnDeal = new javax.swing.JButton();
        dealersHand = new javax.swing.JLabel();
        yourHand = new javax.swing.JLabel();
        dealerFirstCard = new javax.swing.JLabel();
        playerFirstCard = new javax.swing.JLabel();
        dealerSecondCard = new javax.swing.JLabel();
        playerSecondCard = new javax.swing.JLabel();
        firstCard = new javax.swing.JLabel();
        secondCard = new javax.swing.JLabel();
        welcomeBack = new javax.swing.JLabel();
        outputPlayerBalance = new javax.swing.JTextField();
        balanceIs = new javax.swing.JLabel();
        outputPlayerName = new javax.swing.JTextField();
        youAreCurrentlyBetting = new javax.swing.JLabel();
        outputPlayerBet = new javax.swing.JTextField();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        title.setForeground(new java.awt.Color(10, 155, 10));
        title.setText("Black Jack");

        author.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        author.setText("By: Mathew Borg");

        btnDeal.setText("Deal");
        btnDeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDealActionPerformed(evt);
            }
        });

        dealersHand.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        dealersHand.setText("Dealers Hand");

        yourHand.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        yourHand.setText("Your Hand");

        dealerFirstCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gray_back.png"))); // NOI18N
        dealerFirstCard.setMaximumSize(new java.awt.Dimension(240, 264));
        dealerFirstCard.setMinimumSize(new java.awt.Dimension(240, 264));

        playerFirstCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gray_back.png"))); // NOI18N
        playerFirstCard.setMaximumSize(new java.awt.Dimension(240, 264));
        playerFirstCard.setMinimumSize(new java.awt.Dimension(240, 264));

        dealerSecondCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gray_back.png"))); // NOI18N

        playerSecondCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gray_back.png"))); // NOI18N

        firstCard.setText("First");

        secondCard.setText("Second");

        welcomeBack.setText("You are playing as:");

        outputPlayerBalance.setEnabled(false);

        balanceIs.setText("Your Balance Is:");

        outputPlayerName.setEnabled(false);

        youAreCurrentlyBetting.setText("You Are Currently Betting:");

        outputPlayerBet.setEnabled(false);

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(firstCard)
                                .addGap(87, 87, 87)
                                .addComponent(secondCard))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dealerFirstCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(playerFirstCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(playerSecondCard)
                                    .addComponent(dealerSecondCard)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(author))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(title))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(welcomeBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(outputPlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(dealersHand))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(balanceIs)
                            .addComponent(yourHand)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnDeal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnExit))
                            .addComponent(youAreCurrentlyBetting)
                            .addComponent(outputPlayerBalance)
                            .addComponent(outputPlayerBet))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(author)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(welcomeBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputPlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dealersHand)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dealerFirstCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dealerSecondCard))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstCard)
                    .addComponent(secondCard))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playerFirstCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playerSecondCard))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yourHand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(balanceIs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputPlayerBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(youAreCurrentlyBetting)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputPlayerBet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeal)
                    .addComponent(btnExit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDealActionPerformed
        String[] playerFirst, playerSecond, DealerFirst, DealerSecond; //creats string arrays for the 4 cards we draw
        int playerHandValue = 0, dealerHandValue = 0; //creats ints for player total hand and dealer total hand
        boolean acePlayer = false, aceDealer = false; //creats booleans for if there is a ace detected for dealer and player
        int[] playerCards = new int[2]; //creatts int array for player cards
        int[] dealerCards = new int[2]; //creats int array for dealerCards

        playerFirst = CardDeck.generateCard(); //gets a random card for the players first card
        String sPlayerFirstCardValue = playerFirst[0]; //creats string and sets it to playerFirst at position 0
        int playerFirstCardValue = CardDeck.cardValue(sPlayerFirstCardValue); //crears int playerFirstCardValue and sets it to the return value of cardValue
        if (playerFirstCardValue == 0) { //if playerFirstCardValue = 0
            acePlayer = true; //set acePlayer to be true
        }
        
        playerSecond = CardDeck.generateCard(); //gets a random card for the second first card
        String sPlayerSecondCardValue = playerSecond[0]; //creats string and sets it to playerSecond at position 0
        int playerSecondCardValue = CardDeck.cardValue(sPlayerSecondCardValue); //crears int playerSecondCardValue and sets it to the return value of cardValue
        if (playerSecondCardValue == 0){ //if playerSecondCardValue = 0
            acePlayer = true; //set acePlayer to be true
        }
        
        DealerFirst = CardDeck.generateCard(); //gets a random card for the dealers first card
        String sDealerFirstCardValue = DealerFirst[0]; //creats string and sets it to DealerFirst at position 0
        int DealerFirstCardValue = CardDeck.cardValue(sDealerFirstCardValue); //crears int DealerFirstCardValue and sets it to the return value of cardValue
        if (DealerFirstCardValue == 0){ //if DealerFirstCardValue = 0 
            aceDealer = true; //set aceDealer to be true
        }
        
        DealerSecond = CardDeck.generateCard(); //gets a random card for the dealers second card
        String sDealerSecondCardValue = DealerSecond[0]; //creats string and sets it to DealersSecond at position 0
        int DealerSecondCardValue = CardDeck.cardValue(sDealerSecondCardValue); //crears int DealerSecondCardValue and sets it to the return value of cardValue
        if (DealerSecondCardValue == 0){ //if DealerSecondCardValue = 0 
            aceDealer = true; //set aceDealer to be true
        }
        
        //adds both of the players cards to the playerCards array
        playerCards[0] = playerFirstCardValue; 
        playerCards[1] = playerSecondCardValue;
        
        playerHandValue =  CardDeck.handValue(playerCards, acePlayer); //sets playerHandValue to return value of handValue
        
        //adds both of the dealer cards to the dealerCards array
        dealerCards[0] = DealerFirstCardValue;
        dealerCards[1] = DealerSecondCardValue;
        
        dealerHandValue =  CardDeck.handValue(dealerCards, aceDealer); //sets dealerHandValue to return value of handValue
        
        JOptionPane.showMessageDialog(null, "You have a total valve of " + playerHandValue + "The Dealers Has A Total Value of" + dealerHandValue); // creates a pop up box to print information
        
        settleBets(playerHandValue, dealerHandValue); //runs settle bets method
        
        setOutput(); //sets the updated outputs to GUI
        
        betInfo(); //changes the betInfo
    }//GEN-LAST:event_btnDealActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0); //exits the program
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        startUp(); //runs startUp method
        playerInit(); //runs playerInit method
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    
    /*
        Function: startUp
        Purpose:  to run the game start up menu
        Parameters: n/a
        Return: n/a
     */
     public static void startUp(){
        JOptionPane.showMessageDialog(null, "Welcome to Black Jack!! Please Click Ok to Continue"); // creates a pop up box to print information
        inputPlayerName = JOptionPane.showInputDialog("Who do you want to play as. (Ritch, Wise or Poor)"); //sets inputPlayerName to JOptionPane input
        betInfo(); //runs metInfo method
    }
    
    /*
        Function: betInfo
        Purpose:  to run the place a bet menu 
        Parameters: n/a
        Return: n/a
     */
    public static void betInfo(){ 
        String betTemp = JOptionPane.showInputDialog("Please enter bet value"); //creats String betTemp and sets it to JOptionPane input
        try{ //try
            playerBet = Integer.parseInt(betTemp); //set playerbet to betTemp
        }catch (NumberFormatException e){ //catch if there are letters
             JOptionPane.showMessageDialog(null, "Use Numbers Only"); // creates a pop up saying use numbers only
             return; //return  
        }
    }
    
    /*
        Function: playerInit
        Purpose:  to initalise all player data from xml
        Parameters: n/a
        Return: n/a
     */
    public static void playerInit(){
        XmlCommands.findXml(); //run findXml method
        
        boolean userExist = XmlCommands.checkPlayerXmlElement(inputPlayerName); //sets boolean userExist to return value of checkPlayerXmlElement
        
        if (userExist) { //if userExist = true 
            String[] usernames = XmlCommands.printXml("player", "username"), totalGames = XmlCommands.printXml("player", "totalGames"), balance = XmlCommands.printXml("player", "balance"); //creats strings to what was read from xml
            int[] gTemp = new int[usernames.length], bTemp = new int[usernames.length]; //creats temp int arrays
            playerName = usernames[XmlCommands.playerPosition]; //sets playerName to usernames at position playerPosition
            for (int i = 0; i <  usernames.length; i++) { //creats for loop 
                gTemp[i] = Integer.parseInt(totalGames[i]); //converts strings to ints
                bTemp[i] = Integer.parseInt(balance[i]);
            }
            playerBalance = bTemp[XmlCommands.playerPosition]; //sets playerBalance to bTemp at playerPosition
        }else{ //else 
            JOptionPane.showMessageDialog(null, "Not a Valid User!"); // creates a pop up box to print information
            inputPlayerName = JOptionPane.showInputDialog ("Who do you want to play as. (Ritch, Wise or Poor)"); //retry who do you want to play as
        }
    }
    
    /*
        Function: settleBets
        Purpose:  to find out who won and to pay them or remove money from there ballance 
        Parameters: int player to get player total hand value
                    int dealer to get dealer total hand value 
        Return: n/a
     */
    public static void settleBets (int player, int dealer){
        if (player > 21){ // if player is > 21
            //lost
            updatePlayerBallance(XmlCommands.playerPosition,false); //run updatePlayerBallance method
            JOptionPane.showMessageDialog(null, "You have lost your bet of " + playerBet); // creates a pop up box to print information
        } else if (player == dealer){ //if player = dealer 
            //tie
            JOptionPane.showMessageDialog(null, "You Have Tied The Dealer. Your Ballance Will Remain the Same"); // creates a pop up box to print information
        }else if(player < dealer && dealer <=21){ //if player is < than dealer and dealver is < or eual to 21
            //playerloss
            updatePlayerBallance(XmlCommands.playerPosition,false); //run updatePlayerBallance method
            JOptionPane.showMessageDialog(null, "You have lost your bet of " + playerBet); // creates a pop up box to print information
        }else if(player == 21){ // if player is equal to 21
            //player wins
            updatePlayerBallance(XmlCommands.playerPosition,true); //run updatePlayerBallance method
            JOptionPane.showMessageDialog(null, "You have won " + playerBet); // creates a pop up box to print information
        }else { //else
            //player has won
            updatePlayerBallance(XmlCommands.playerPosition,true); //run updatePlayerBallance method
            JOptionPane.showMessageDialog(null, "You have won " + playerBet); // creates a pop up box to print information
        }
    }
    
    /*
        Function: updatePlayerBallance
        Purpose:  to update player ballance in xml file 
        Parameters: int playerPosition to get player posion in xml
                    boolean win to find out if there was a win for player
        Return: n/a
     */
    public static void updatePlayerBallance(int playerPosition, boolean win){
        String[] allBallance = XmlCommands.printXml("player", "balance"); //creats string array and sets it to return value of printXml
        String sPlayerBallance = allBallance[playerPosition]; //creats string and sets it to value of allBallance at position playerPosition
        XmlCommands.findXml(); //runs findXml method
        int newPlayerBallance = Integer.parseInt(sPlayerBallance); //creats new int and sets it to sPlayerBallance
        int winings = 0, losses; //creats ints
        if (win){ // if win is true
            winings = playerBet; //winings = playerBet
            newPlayerBallance += winings;  //add newPlayerBallance to winings
            playerBalance = newPlayerBallance; //set playerBalance to equal newPlayerBallance
            String newBallance = String.valueOf(newPlayerBallance); //creats string newBallance and sets it to newPlayerBallance
            XmlCommands.updateXmlElement(playerPosition, "balance", newBallance); //runs updateXmlElement method
        }else{ //else 
            newPlayerBallance -= playerBet; //newPlayerBallance take away playerBet
            String newBallance = String.valueOf(newPlayerBallance); //creats new string and sets it to newPlayerBallance
            playerBalance = newPlayerBallance; //sets playerBalance to newPlayerBallance
            XmlCommands.updateXmlElement(playerPosition, "balance", newBallance); //runs updateXmlElement method
        }
        XmlCommands.updateXml(); //runs updateXml method
    }
    
    /*
        Function: setOutput
        Purpose:  to update GUI output Data
        Parameters: 
        Return: n/a
     */
    public void setOutput(){
        outputPlayerName.setText(playerName); //sets outputPlayerName to playerName
        outputPlayerBalance.setText(Integer.toString(playerBalance)); //sets outputPlayerBalance to playerBalance
        outputPlayerBet.setText(Integer.toString(playerBet)); //sets outputPlayerBet to playerBet
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel author;
    private javax.swing.JLabel balanceIs;
    private javax.swing.JButton btnDeal;
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel dealerFirstCard;
    private javax.swing.JLabel dealerSecondCard;
    private javax.swing.JLabel dealersHand;
    private javax.swing.JLabel firstCard;
    private javax.swing.JTextField outputPlayerBalance;
    private javax.swing.JTextField outputPlayerBet;
    private javax.swing.JTextField outputPlayerName;
    private javax.swing.JLabel playerFirstCard;
    private javax.swing.JLabel playerSecondCard;
    private javax.swing.JLabel secondCard;
    private javax.swing.JLabel title;
    private javax.swing.JLabel welcomeBack;
    private javax.swing.JLabel youAreCurrentlyBetting;
    private javax.swing.JLabel yourHand;
    // End of variables declaration//GEN-END:variables
}
